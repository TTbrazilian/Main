# README ‚Äî Integrante 4 (Seguran√ßa, Qualidade e Integra√ß√£o Cont√≠nua)

> **Papel no projeto:** O Integrante 4 √© respons√°vel por **seguran√ßa do back-end**, **qualidade do c√≥digo** e **esteira de integra√ß√£o cont√≠nua (CI)**. O foco √© garantir que as rotas criadas pelo time estejam protegidas (auth/RBAC), bem testadas (unit√°rio/E2E) e publicadas com confiabilidade no ambiente de entrega.

---

## üéØ Objetivo do C√≥digo-Fonte

Implementar a **camada de seguran√ßa e qualidade** do back-end da aplica√ß√£o, composta por:

1) **Autentica√ß√£o e Autoriza√ß√£o (RBAC):**
   - Middleware de JWT com refresh token.
   - RBAC (Role-Based Access Control) para restringir endpoints por perfis (`admin`, `manager`, `user`).
   - Guards para opera√ß√µes sens√≠veis (cria√ß√£o/remo√ß√£o, exporta√ß√£o de dados, etc.).

2) **Observabilidade e Auditoria:**
   - Logger estruturado (ex.: pino) com correla√ß√£o de requisi√ß√µes.
   - Auditoria de a√ß√µes cr√≠ticas (quem fez, o que fez, quando e de onde).
   - Endpoints de liveness (`/health`) e readiness (`/ready`).

3) **Qualidade e Confiabilidade:**
   - Testes unit√°rios (vitest/jest) e E2E (supertest).
   - Valida√ß√£o de payloads (zod/yup) e sanitiza√ß√£o de entrada.
   - Rate limiting e CORS configur√°veis por ambiente.

4) **Integra√ß√£o Cont√≠nua (CI):**
   - Pipeline no GitHub Actions (build ‚Üí lint ‚Üí test ‚Üí coverage ‚Üí artifact).
   - Gate de qualidade (PR falha se lint/test/coverage n√£o passarem).
   - Publica√ß√£o autom√°tica de documenta√ß√£o OpenAPI.

**Integra√ß√£o no projeto final**  
- As **rotas de API** criadas pelos demais integrantes passam por **middlewares** deste m√≥dulo (auth, RBAC, rate limit).  
- O **pipeline de CI** deste integrante valida e libera a **imagem do back-end** usada no deploy.  
- A **documenta√ß√£o OpenAPI** consolidada √© consumida pelo Front-end e pela equipe de QA.

---

## üß© Pontos de Integra√ß√£o com as Demais Partes

**Back-end (rotas dos Integrantes 1‚Äì3)**  
Aplicar os middlewares exportados por este m√≥dulo:

    import { authGuard, rbac, validate } from "@/core/security";
    import { createOrderSchema } from "@/schemas/order";

    app.post(
      "/api/orders",
      authGuard(),                 // valida JWT/refresh
      rbac(["manager", "admin"]),  // restringe por papel
      validate(createOrderSchema), // valida body/query/params
      createOrderController
    );

**Front-end**  
- Recebe erros padronizados: { code, message, details } e status HTTP consistentes.  
- Consome a OpenAPI JSON publicada pelo pipeline para gerar clients tipados.

**DevOps/Deploy**  
- Health/readiness para balanceador/orquestrador.  
- Logs estruturados prontos para ELK/CloudWatch/Datadog.

---

## üõ†Ô∏è Stack e Depend√™ncias-Chave

- Runtime/Framework: Node.js, Express/Koa/Fastify (conforme projeto)  
- Type Safety & Padroniza√ß√£o: TypeScript, ESLint, Prettier  
- Seguran√ßa: jsonwebtoken, bcrypt/argon2, helmet, cors, express-rate-limit  
- Valida√ß√£o: zod (ou yup)  
- Testes: vitest/jest, supertest (E2E)  
- Logs: pino + pino-http  
- Docs: swagger-ui-express + OpenAPI YAML/JSON  
- CI: GitHub Actions

---

## üì¶ Estrutura de Pastas (m√≥dulo do Integrante 4)

    /src
      /core
        /security
          auth.guard.ts         # valida√ß√£o de JWT/refresh
          rbac.guard.ts         # RBAC por rota
          rate-limit.ts         # prote√ß√£o contra abuso
          sanitizer.ts          # sanitiza√ß√£o de entrada
        /observability
          logger.ts             # logger estruturado
          audit.ts              # trilhas de auditoria
          health.controller.ts  # /health e /ready
      /schemas
        order.schema.ts         # exemplo de schema Zod
        user.schema.ts
      /tests
        unit/
          auth.guard.spec.ts
          rbac.guard.spec.ts
        e2e/
          orders.e2e.spec.ts
      /docs
        openapi.yaml            # contrato consolidado
      /config
        env.ts                  # carregamento seguro de envs

---

## üîê Vari√°veis de Ambiente

Crie um `.env` (ou use segredos no CI):

    NODE_ENV=development
    PORT=3000
    JWT_SECRET=troque-este-segredo
    JWT_EXPIRES_IN=15m
    JWT_REFRESH_EXPIRES_IN=7d
    RATE_LIMIT_WINDOW_MS=60000
    RATE_LIMIT_MAX=100
    LOG_LEVEL=info

**Importante:** Secrets n√£o devem ser commitados. No CI, configure via Actions ‚Üí Secrets.

---

## ‚ñ∂Ô∏è Como Rodar Localmente

1) Instalar depend√™ncias  
    npm install

2) Vari√°veis de ambiente  
    cp .env.example .env   # (ou crie manualmente)

3) Rodar em dev  
    npm run dev

4) Testes e qualidade  
    npm run lint  
    npm run test  
    npm run test:e2e  
    npm run coverage

5) Documenta√ß√£o (Swagger)  
    npm run docs:serve     # exp√µe /docs com swagger-ui

**Rotas √∫teis**  
- GET /health ‚Üí status da aplica√ß√£o  
- GET /ready ‚Üí pronto para receber tr√°fego  
- GET /docs ‚Üí documenta√ß√£o da API (Swagger UI)

---

## ü§ù Conven√ß√µes de C√≥digo e Commits

**Conventional Commits (exemplos):**  
- feat(auth): suporte a refresh token  
- fix(rbac): ajustar papel 'manager' nas rotas de pedido  
- test(e2e): cobertura para fluxo de cria√ß√£o de pedido  
- chore(ci): adicionar gate de coverage a 85%

**Lint/Format:** PRs falham se lint/format n√£o passarem.  
**Branching:** feat/, fix/, chore/, docs/, test/.

---

## üîÑ Pipeline de CI (Vis√£o Geral)

1) Build (TypeScript ‚Üí JavaScript)  
2) Lint + Typecheck (quebra se houver erros)  
3) Testes unit√°rios e E2E (gera cobertura)  
4) Upload de artifacts (relat√≥rios e OpenAPI)  
5) Publica√ß√£o da documenta√ß√£o (preview para o time)

> O PR s√≥ pode ser mergeado quando todos os jobs passam e a cobertura m√≠nima √© atendida.

---

## üìö Padr√µes de Erro e Resposta

**Formato de erro (exemplo):**  
    { "code": "AUTH.INVALID_TOKEN", "message": "Token inv√°lido", "details": null }

- Valida√ß√£o (400): retorna detalhes do schema falhado.  
- Autentica√ß√£o (401) / Autoriza√ß√£o (403): mensagens claras e auditadas.  
- Idempot√™ncia: recomenda-se `Idempotency-Key` em rotas sens√≠veis.

---

## ‚úÖ Crit√©rios de Aceite (DoD) do Integrante 4

- [ ] Middlewares de auth, RBAC, rate limit e sanitiza√ß√£o aplic√°veis nas rotas.  
- [ ] Logs estruturados e auditoria ativos nas opera√ß√µes cr√≠ticas.  
- [ ] /health e /ready implementados.  
- [ ] Testes unit√°rios e E2E com cobertura m√≠nima definida.  
- [ ] Pipeline de CI validando build, lint, testes e coverage.  
- [ ] OpenAPI atualizada e servida em /docs.

---

## üó∫Ô∏è Como Este README Difere dos Demais Integrantes

Cobre **exclusivamente** o eixo **Seguran√ßa + Qualidade + CI**, complementando o trabalho dos integrantes que criam regras de neg√≥cio, modelos e rotas. Enquanto os outros focam em **features funcionais**, o Integrante 4 garante que **tudo rode com seguran√ßa, previsibilidade e padroniza√ß√£o** do desenvolvimento ao deploy.

---

## üì© Contato T√©cnico

Para d√∫vidas sobre middlewares, padr√µes de erro, configura√ß√£o do CI ou OpenAPI, abrir uma issue com o r√≥tulo `security/ci` e um exemplo reproduz√≠vel (rota, payload, resultado esperado).
